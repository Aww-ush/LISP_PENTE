(load "/Users/aayushshrestha/Desktop/LispProject/board.lisp")
(load "/Users/aayushshrestha/Desktop/LispProject/CoinToss.lisp")
(load "/Users/aayushshrestha/Desktop/LispProject/Round.lisp")
(load "/Users/aayushshrestha/Desktop/LispProject/LoadAndSavetoFile.lisp")
(load "/Users/aayushshrestha/Desktop/LispProject/Tournament.lisp")
; human and computer both store data in this way
; (colour totalPoints Points CapturePoints TotalMoves) => ("W" 0 0 0 0)

(defun StartGame ()
    (cond 
        ((= (DoesUserWantToStartGame) 1) 
            (DoesUserWantToLoadGame)
        )
        (t (princ "Thank You! See you next time!") (terpri))
    )
)
(defun DoesUserWantToStartGame ()
  (princ "Do you want to start the game? Please enter \"N\" for 'No' and \"Y\" for 'Yes': ")
  (terpri)
  (let ((input (string-upcase (read))))
    (cond
      ((string= input "Y") 1)
      ((string= input "N") 0)
      (t (doesUserWantToStartGame))))
)


(defun DoesUserWantToLoadGame ()
  (princ "Do you want to load the game? Please enter \"N\" for 'No' and \"Y\" for 'Yes': ")
  (terpri)
  (let ((input (string-upcase (read))))
    (cond
      ((string= input "Y") (StartFromLoadedGame))
      ((string= input "N") (StartNewGame))
      (t (DoesUserWantToLoadGame))
    )
  )
)

(defun StartFromLoadedGame()
  (let* ((parsedData (ReadFromFile))
         (human (list "" (nth 1 parsedData) 0 (nth 2 parsedData) 0))
         (computer (list "" (nth 3 parsedData) 0 (nth 4 parsedData) 0))
        )
        (InitialiseHumanAndComputer (first parsedData) human computer)
    (cond 
      ((string= (nth 5 parsedData) "H") 
       (let* ((newHuman (SetPlayerColour human (nth 6 parsedData)))
              (newComputer (SetPlayerColour computer (GetOppositeColour (nth 6 parsedData))))
              (newHumanComputerList (InitialiseHumanAndComputer (first parsedData) newHuman newComputer))
             )
         (Tournament (first parsedData) (nth 0 newHumanComputerList) (nth 1 newHumanComputerList) 1 (nth 5 parsedData))
       )
      )
      (t 
       (let* ((newComputer (SetPlayerColour computer (nth 6 parsedData)))
              (newHuman (SetPlayerColour human (GetOppositeColour (nth 6 parsedData))))
              (newHumanComputerList (InitialiseHumanAndComputer (first parsedData) newHuman newComputer))
             )
         (Tournament (first parsedData) (nth 0 newHumanComputerList) (nth 1 newHumanComputerList) 1 (nth 5 parsedData))
       )
      )
    )
  )
)

(defun StartNewGame()
  (Tournament (GetEmptyBoard) '("" 0 0 0 0) '("" 0 0 0 0) 0 "")
)

(defun InitialiseHumanAndComputer(board human computer)
  (let* ((HumanComputerPoint (CalculateRoundPointsInLoadedGame board (GetPlayerColour human) (GetPlayerColour computer)))
         (newHuman (IncreaseMove (IncreaseRoundPoint human (nth 0 HumanComputerPoint))))
         (newComputer (IncreaseMove (IncreaseRoundPoint computer (nth 1 HumanComputerPoint))))
         (HumanComputerMove(CalculateTotalMove board (GetPlayerColour human) (GetPlayerColour computer) 0 0 0 (GetPlayerCapturePoints human) (GetPlayerCapturePoints computer)))
         (newHuman1(SetPlayerMove newHuman (nth 0 HumanComputerMove)))
         (newComputer1(SetPlayerMove newComputer (nth 1 HumanComputerMove)))
        )
    (list newHuman1 newComputer1)
    
  )
)
(StartGame)

    ;;   (let ((newBoard(InsertPiece board 0 0 "W")))
    ;;     (PrintBoardWithIndex newBoard)
    ;;     (let ((human' ("W" 0 0 0 0)))
    ;;       (let ((newBoardPlayer(MakeMove newBoard human)))
    ;;         (PrintBoardWithIndex (first newBoardPlayer))
    ;;         (terpri)
    ;;         (print (rest newBoardPlayer))
    ;;     )
    ;; )
    ;; )
    ;;    (let((board(GetEmptyBoard)))
    ;;  (PlayRound '("W" 0 0 0 0 0) '("B" 0 0 0 0 0) board result))